"""/*************************************************************************
 *
 *  Algorithms and Computing Theory
 *
 *  Problem: Depth First Search
 *  Description: The purpose of this homework is to evaluate experimentally the performance of an efficient
                  implementation of DFS.
 *
    Question 2:- 
      -----------------------------------------------------------------
      | Input | |E|=|V| -1   | |E|=(|V| -1)^3/2    |  |E|=(|V| -1)^2   | 
      ------------------------------------------------------------------
      | V =10 |     0        |	     0             |     0             |     
      ------------------------------------------------------------------
      |  100  |  997300	     |  5963800	           |     95738400      |
      ------------------------------------------------------------------
      | 1000  |  10008300    |	185571300          |   158345298900    |
      ------------------------------------------------------------------
      
    Question 3:-
 *     Give an approximate formula for the asymptotic running time of DFS based on your experiments.
      ===> O(V + E)
      
      How does this compare with the expected O(|V| + |E|)?If the results differ, overview the code of the data structures used for the adjacency list
      and explain what might have happened.
      ===> It matches with expected time O(|V| + |E|) for some input. But the time complexity does not match
      when V = 1000, E = 998001.
      This might be due to overhead involved in this algorithm due to recursive calls involving stack
      variables and stack un-rolling.
      
      -> Calculating the time for single operation :-
      
      Based on the running times observed for DFS, the time complexity is O(V + E),
      For instance, If we consider the number of nodes V= 1000 and edges E = 999,
      then the number of operations based on O(V + E ) would be 1999.
      The total time taken to perform this operation is 10008300 in nanosecond.
      We calculated the time taken to perform a single operation (10008300/1999) is 5006.653327. 
      Then we performed the same process for others and observed the time taken for single operation.
      We see that the range is around 5000 to 15000 nano sec.
      (below table for reference.)

      Below table for time for single operation
      ------------------------------------------------------------------------
      | Input |    |E|=|V| -1   | |E|=(|V| -1)^3/2    |  |E|=(|V| -1)^2       | 
      -------------------------------------------------------------------------
      | V =10 |     0           |	     0       |     0                  |     
      -------------------------------------------------------------------------
      |  100  |   5011.557789   |	5501.46988   |	8876.141905           |
      -------------------------------------------------------------------------
      | 1000  |    5006.653327  |	5696.852754  |	153796.6              |
      -------------------------------------------------------------------------

    
 *
 *************************************************************************/"""

import random 
import time


def random_adjacency_list(n):
      '''This function is to create random edges in adjacency list'''
      r1 = random.randint(0, n-1)
      r2 = random.randint(0, n-1)
      return r1, r2
      
# Create a dictionary to represent the details of each node.
# NodeDetails are in following format (NodeNumber , "COLOR", visitedBy, DiscoveryTime, FinishingTime)
nodeDetails={}

# Create a dictionary to store graph adjanceyList 
adjanceyList={}

def create_empty_node( nodeIndex):
      ''' This function is to create empty node  with default values'''
      nodeTuple = [nodeIndex, "WHITE", -1 ,0,0]
      nodeDetails[nodeIndex] = nodeTuple    
             

def create_adj_list(v,e):
      ''' This function is to create adjancey List '''
      for i in range(nodes):
            adjanceyList[i] = []
            create_empty_node(i)
      
      for i in range(e):
            
            alreadyPresent = True
            #make sure edge is not already present , else generate new random edge
            while (alreadyPresent):
                nodepair = random_adjacency_list(v)
                node1 = nodepair[0]
                node2 = nodepair[1]
            
                # Find if the edge already exist from node1 to node2 using adjanceyList
                ValueList = adjanceyList[node1]    
                       
                alreadyPresent = (node2 in ValueList)
        
                if(not alreadyPresent):
                    adjanceyList[node1].append(node2)
     
      
            
def DFS():
      '''This function is to initialize all node to WHITE'''
      time = 0
      for nodeIndex,nodeValue in nodeDetails.items():
            if(nodeValue[1] =="WHITE"):
                  # Recursively visit DFS_VISIT function and nodeValue become the root of a new tree 
                  DFS_VISIT(nodeValue,time)
            
def DFS_VISIT(nodeValue ,time):
        ''' This function recursively calls when node is un-visited'''
        # increament time
        time = time +1 

        # Mark the node as GRAY
        nodeValue[1]="GRAY"
        nodeValue[3]= time
        
        #Find out all nodes reachble from the current node using adjanceyList.
        verticesList = adjanceyList[nodeValue[0]]

        # each node v adjacent to node u and recursively visit node v if it is white.
        for eachVertice in verticesList:
              # Explore its neighbours
              verticeTuple = nodeDetails[eachVertice]
              if(verticeTuple[1] =="WHITE"):            
                    verticeTuple[2] = nodeValue[0]
                    DFS_VISIT(verticeTuple,time)
                      
        time =time+1
        # Explored all edges and return finishing time
        # And marke node as visted with color as BLACK
        nodeValue[1]="BLACK"
        nodeValue[4]=time


# User input     
nodes = int(input('Enter number of vertices:'))
edge = int(input('Enter number of edges:'))

# Measure running time
t1 =time.time_ns()

#Call create_adj_list
create_adj_list(nodes,edge)

# Call DFS function
DFS()
t2=time.time_ns()
print('Total running time for DFS is',t2-t1,'in nano sec. ')



